; Reversible Addition Example
; Demonstrates RISA (Reversible Instruction Set Architecture)

main:
    ; Initialize values
    LI R0, 10        ; a = 10
    LI R1, 20        ; b = 20
    LI R2, 0         ; c = 0 (will hold result)
    
    DEBUG Before reversible add
    
    ; Reversible addition: R2 = R2 + R0 + R1
    ; This preserves R0 and R1 while updating R2
    RADD R0, R1, R2    ; R2 = 0 + 10 + 20 = 30
    
    DEBUG After reversible add - all values preserved
    
    ; Demonstrate reversal
    ; To reverse RADD R0, R1, R2, we do RSUB R0, R1, R2
    ; Which computes: R2 = R2 - R0 - R1 (should give us original R2 = 0)
    RSUB R0, R1, R2    ; R2 = 30 - 10 - 20 = 0
    
    DEBUG After reversal - R2 should be 0 again
    
    ; Demonstrate self-inverse operation (XOR)
    LI R3, 0xFF      ; Some value
    LI R4, 0xAA      ; Another value
    
    DEBUG Before XOR
    
    ; RXOR is self-inverse: applying it twice restores original
    RXOR R4, R3      ; R3 = R3 XOR R4
    DEBUG After first XOR
    
    RXOR R4, R3      ; R3 = R3 XOR R4 (reverses to original)
    DEBUG After second XOR - R3 restored
    
    ; Demonstrate register swap (also self-inverse)
    LI R5, 100
    LI R6, 200
    
    DEBUG Before swap
    SWAP R5, R6      ; Swap R5 and R6
    DEBUG After swap - values exchanged
    SWAP R5, R6      ; Swap again to restore
    DEBUG After second swap - values restored
    
    HALT